plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url 'https://jitpack.io' }

}

dependencies {
    // To change the versions see the gradle.properties file
    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "curse.maven:puffish-skills-835091:${project.puffish_skills_version}"
    modImplementation "maven.modrinth:spell-power:${project.spellpower_version}-fabric"
    //modImplementation("maven.modrinth:spell-engine:${project.spell_engine_version}-fabric")
    modImplementation files("build/libs/dependencies/spell_engine-0.12.01.20.1.jar")

    modImplementation "curse.maven:simply-swords-659887:${project.simplyswords_version}"

    //modImplementation "curse.maven:paladins-and-priests-856548:${project.paladins_version}"
    modImplementation files("build/libs/dependencies/paladins-1.0.21.20.1.jar")

    implementation("com.github.LlamaLad7:MixinExtras:${mixin_extras_version}")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${mixin_extras_version}")
    implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "license", project.license
    inputs.property "version", project.version
    inputs.property "mod_authors", project.mod_authors
    inputs.property "mod_description", project.mod_description
    inputs.property "contact_homepage", project.contact_homepage
    inputs.property "contact_sources", project.contact_sources
    inputs.property "contact_issues", project.contact_issues
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "mod_id": project.mod_id,
                "mod_name": project.name,
                "license": project.license,
                "version": project.version,
                "mod_authors": project.mod_authors,
                "mod_description": project.mod_description,
                "contact_homepage": project.contact_homepage,
                "contact_sources": project.contact_sources,
                "contact_issues": project.contact_issues,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
